<?jelly escape-by-default='true'?>
<j:jelly xmlns:j="jelly:core" xmlns:st="jelly:stapler" xmlns:d="jelly:define" xmlns:l="/lib/layout" xmlns:t="/lib/hudson">
    <st:contentType value="application/x-java-jnlp-file" />
    <j:new var="h" className="hudson.Functions" />
    <j:set var="rootURL" value="${app.rootUrl}" />

    <!--
      See http://www.dallaway.com/acad/webstart/ for obtaining the certificate.
    -->

    <!-- See http://java.sun.com/j2se/1.5.0/docs/guide/javaws/developersguide/syntax.html for the syntax -->
    <jnlp spec="1.0+"
          codebase="${rootURL}computer/${h.encode(it.node.nodeName)}/">

        <information>
            <title>Agent for ${it.displayName}</title>
            <vendor>Jenkins project</vendor>
            <homepage href="https://jenkins-ci.org/"/>
        </information>

        <security>
            <all-permissions/>
        </security>

        <j:set var="launcher" value="${it.delegatedLauncher}"/>

        <resources>
            <j:set var="port" value="${request.getParameter('debugPort')}"/>
            <j:choose>
                <j:when test="${port!=null}">
                    <j2se version="1.8+" java-vm-args="${launcher.vmargs} -Xdebug -Xrunjdwp:transport=dt_socket,server=y,address=${port}" />
                </j:when>
                <j:otherwise>
                    <j2se version="1.8+" java-vm-args="${launcher.vmargs}"/>
                </j:otherwise>
            </j:choose>
            <jar href="${rootURL}jnlpJars/remoting.jar"/>
        </resources>

        <application-desc main-class="hudson.remoting.jnlp.Main">
            <argument>${it.jnlpMac}</argument>
            <argument>${it.node.nodeName}</argument>
            <!-- <j:if test="${launcher.isWebSocket()}"> -->
            <argument>-webSocket</argument>
            <!-- </j:if> -->
            <j:if test="${launcher.tunnel!=null}">
                <argument>-tunnel</argument>
                <argument>${launcher.tunnel}</argument>
            </j:if>
            <j:if test="${not launcher.workDirSettings.disabled}">
                <argument>-workDir</argument>
                <j:choose>
                    <j:when test="${launcher.workDirSettings.useAgentRootDir}">
                        <argument>${it.node.remoteFS}</argument>
                    </j:when>
                    <j:otherwise>
                        <argument>${launcher.workDirSettings.workDirPath}</argument>
                    </j:otherwise>
                </j:choose>
                <argument>-internalDir</argument>
                <argument>${launcher.workDirSettings.internalDir}</argument>
                <j:if test="${launcher.workDirSettings.failIfWorkDirIsMissing}">
                    <argument>-failIfWorkDirIsMissing</argument>
                </j:if>
            </j:if>


            <j:if test="${rootURL!=app.rootUrlFromRequest}">
                <!--
                  rootURL is based on the URL in the system config, but there has been
                  numerous reports about people moving Jenkins to another place but
                  forgetting to update it. To improve the user experience in this regard,
                  let's also pass the URL that the browser sent us as well, so that the
                  JNLP Main class can try both.

                  Note that rootURL is still necessary in various situations, such
                  as reverse HTTP proxy situation, which makes rootUrlFromRequest incorrect.
                -->
                <argument>-url</argument>
                <argument>${app.rootUrlFromRequest}</argument>
            </j:if>
            <argument>-url</argument>
            <argument>${rootURL}</argument>
        </application-desc>
    </jnlp>
</j:jelly>
